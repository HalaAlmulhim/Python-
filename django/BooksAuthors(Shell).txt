rieties of gem-quality corundum are called sapphires. Ruby is one of the traditi
onal cardinal gems, together with amethyst, sapphire, emerald, and diamond.[3] T
he word ruby comes from ruber, Latin for red. The color of a ruby is due to the
element chromium. Some gemstones that are popularly or historically called rubie
s, such as the Black Prince's Ruby in the British Imperial State Crown, are actu
ally spinels. These were once known as "Balas rubies".The quality of a ruby is d
etermined by its color, cut, and clarity, which, along with carat weight, affect
 its value. The brightest and most valuable shade of red called blood-red or pig
eon blood, commands a large premium over other rubies of similar quality. After
color follows clarity: similar to diamonds, a clear stone will command a premium
, but a ruby without any needle-like rutile inclusions may indicate that the sto
ne has been treated. Ruby is the traditional birthstone for July and is usually
pinker than garnet, although some rhodolite garnets have a similar pinkish hue t
o most rubies. The world's most valuable ruby to be sold at auction is the Sunri
se Ruby.")
  File "<console>", line 1
    book5=Book.objects.create(title="Ruby", desc="A ruby is a pink to blood-red
coloured gemstone, a variety of the mineral corundum (aluminium oxide). Other va
rieties of gem-quality corundum are called sapphires. Ruby is one of the traditi
onal cardinal gems, together with amethyst, sapphire, emerald, and diamond.[3] T
he word ruby comes from ruber, Latin for red. The color of a ruby is due to the
element chromium. Some gemstones that are popularly or historically called rubie
s, such as the Black Prince's Ruby in the British Imperial State Crown, are actu
ally spinels. These were once known as "Balas rubies".The quality of a ruby is d
etermined by its color, cut, and clarity, which, along with carat weight, affect
 its value. The brightest and most valuable shade of red called blood-red or pig
eon blood, commands a large premium over other rubies of similar quality. After
color follows clarity: similar to diamonds, a clear stone will command a premium
, but a ruby without any needle-like rutile inclusions may indicate that the sto
ne has been treated. Ruby is the traditional birthstone for July and is usually
pinker than garnet, although some rhodolite garnets have a similar pinkish hue t
o most rubies. The world's most valuable ruby to be sold at auction is the Sunri
se Ruby.")







                                        ^
SyntaxError: invalid syntax
>>> book5=Book.objects.create(title="Ruby", desc="A ruby is a pink to blood-red
coloured gemstone, a variety of the mineral corundum (aluminium oxide).")
>>> Book.objects.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object
(3)>, <Book: Book object (4)>, <Book: Book object (5)>]>
>>> author1=Author.objects.create(first_name="Jane", last_name="Austen")
>>> author2=Author.objects.create(first_name="Emily", last_name="Dickinson")
>>> author3=Author.objects.create(first_name="Fyodor", last_name="Dostoevsky")
>>> author4=Author.objects.create(first_name="William", last_name="Shakespeare")

>>> author5=Author.objects.create(first_name="Lau ", last_name="Tzu")
>>> ^Z

now exiting InteractiveConsole...

(Test) c:\Users\Asus\Documents\python_stack\django\django_intro\books_authors_pr
oj>python manage.py makemigrations
Migrations for 'books_authors_app':
  books_authors_app\migrations\0002_author_notes.py
    - Add field notes to author

(Test) c:\Users\Asus\Documents\python_stack\django\django_intro\books_authors_pr
oj>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0002_author_notes... OK

(Test) c:\Users\Asus\Documents\python_stack\django\django_intro\books_authors_pr
oj>python manage.py shell
Python 3.8.9 (tags/v3.8.9:a743f81, Apr  6 2021, 14:02:34) [MSC v.1928 64 bit (AM
D64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> from books_authors_app.models import *
>>> book1.name="C#"
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'book1' is not defined
>>> Book[0].name="C#"
Traceback (most recent call last):
  File "<console>", line 1, in <module>
TypeError: 'ModelBase' object is not subscriptable
>>> c= Book.ojects.get(id=1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: type object 'Book' has no attribute 'ojects'
>>> c= Book.objects.get(id=1)
>>> book1.title="C#"
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'book1' is not defined
>>> c.title="C#"
>>> c1=Author.objects.get(id=4)
>>> c1.first_name="Bill"
>>> author1.books.add(book1, book2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author1' is not defined
>>> author1.books.add(book1)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author1' is not defined
>>> Author.objects.get(id=1).books.add(Book.objects.get(id=1)
...
...
KeyboardInterrupt
>>> author=Author.objects.get(id=1)
>>> book=Book.objects.get(id=1)
>>> book2=Book.objects.get(id=2)
>>> author.books.add(book)
>>> author.books.add(book2)
>>> Book.objects.get(id=2).__dict__
{'_state': <django.db.models.base.ModelState object at 0x0000000003F20070>, 'id'
: 2, 'title': 'Java', 'desc': 'Java is a class-based, object-oriented programmin
g language that is designed to have as few implementation dependencies as possib
le. It is a general-purpose programming language intended to let application dev
elopers write once, run anywhere (WORA),[16] meaning that compiled Java code can
 run on all platforms that support Java without the need for recompilation.[17]
Java applications are typically compiled to bytecode that can run on any Java vi
rtual machine (JVM) regardless of the underlying computer architecture. The synt
ax of Java is similar to C and C++, but has fewer low-level facilities than eith
er of them. The Java runtime provides dynamic capabilities (such as reflection a
nd runtime code modification) that are typically not available in traditional co
mpiled languages. As of 2019, Java was one of the most popular programming langu
ages in use according to GitHub,[18][19] particularly for client-server web appl
ications, with a reported 9 million developers.', 'created_at': datetime.datetim
e(2021, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>), 'updated_at': datetime.datetime
(2021, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>)}
>>> author2=Author.objects.get(id=2)
>>> author2.books.add(book)
>>> author2.books.add(book2)
>>> book3=Book.objects.get(id=3)
>>> author2.books.add(book3)
>>> book4=Book.objects.get(id=4)
>>> author3=Author.objects.get(id=3)
>>> author3.books.add(book)
>>> author3.books.add(book2)
>>> author3.books.add(book3)
>>> author3.books.add(book4)
>>> author4=Author.objects.get(id=4)
>>> book5=Book.objects.get(id=5)
>>> author4.books.add(book)
>>> author4.books.add(book2)
>>> author4.books.add(book3)
>>> author4.books.add(book4)
>>> author4.books.add(book5)
>>> print(book3.authors)
books_authors_app.Author.None
>>> print(book3.authors.first_name)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ManyRelatedManager' object has no attribute 'first_name'
>>> print(book3.authors.all())
<QuerySet [<Author: Author object (2)>, <Author: Author object (3)>, <Author: Au
thor object (4)>]>
>>> book3.authors.all().__dict__
{'model': <class 'books_authors_app.models.Author'>, '_db': None, '_hints': {'in
stance': <Book: Book object (3)>}, 'query': <django.db.models.sql.query.Query ob
ject at 0x0000000003F3B2E0>, '_result_cache': None, '_sticky_filter': False, '_f
or_write': False, '_prefetch_related_lookups': (), '_prefetch_done': False, '_kn
own_related_objects': {}, '_iterable_class': <class 'django.db.models.query.Mode
lIterable'>, '_fields': None}
>>> print(book3.authors.all())
<QuerySet [<Author: Author object (2)>, <Author: Author object (3)>, <Author: Au
thor object (4)>]>
>>> book3.authors.all().values()
<QuerySet [{'id': 2, 'first_name': 'Emily', 'last_name': 'Dickinson', 'notes': N
one, 'created_at': datetime.datetime(2021, 4, 22, 21, 57, 20, 556663, tzinfo=<UT
C>), 'updated_at': datetime.datetime(2021, 4, 22, 21, 57, 20, 557663, tzinfo=<UT
C>)}, {'id': 3, 'first_name': 'Fyodor', 'last_name': 'Dostoevsky', 'notes': None
, 'created_at': datetime.datetime(2021, 4, 22, 21, 57, 49, 851338, tzinfo=<UTC>)
, 'updated_at': datetime.datetime(2021, 4, 22, 21, 57, 49, 851338, tzinfo=<UTC>)
}, {'id': 4, 'first_name': 'William', 'last_name': 'Shakespeare', 'notes': None,
 'created_at': datetime.datetime(2021, 4, 22, 21, 58, 21, 908172, tzinfo=<UTC>),
 'updated_at': datetime.datetime(2021, 4, 22, 21, 58, 21, 908172, tzinfo=<UTC>)}
]>
>>> author.books.remove(book3)
>>> author.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>]>
>>> author.books.all().__dict__
{'model': <class 'books_authors_app.models.Book'>, '_db': None, '_hints': {'inst
ance': <Author: Author object (1)>}, 'query': <django.db.models.sql.query.Query
object at 0x0000000003F3BA30>, '_result_cache': None, '_sticky_filter': False, '
_for_write': False, '_prefetch_related_lookups': (), '_prefetch_done': False, '_
known_related_objects': {}, '_iterable_class': <class 'django.db.models.query.Mo
delIterable'>, '_fields': None}
>>> author.books.all().values()
<QuerySet [{'id': 1, 'title': 'C Sharp', 'desc': 'C# (pronounced see sharp, like
 the musical note C?, but written with the number sign)[b] is a general-purpose,
 multi-paradigm programming language encompassing static typing, strong typing,
lexically scoped, imperative, declarative, functional, generic, object-oriented
(class-based), and component-oriented programming disciplines.[15]', 'created_at
': datetime.datetime(2021, 4, 22, 21, 38, 27, 711868, tzinfo=<UTC>), 'updated_at
': datetime.datetime(2021, 4, 22, 21, 38, 27, 711868, tzinfo=<UTC>)}, {'id': 2,
'title': 'Java', 'desc': 'Java is a class-based, object-oriented programming lan
guage that is designed to have as few implementation dependencies as possible. I
t is a general-purpose programming language intended to let application develope
rs write once, run anywhere (WORA),[16] meaning that compiled Java code can run
on all platforms that support Java without the need for recompilation.[17] Java
applications are typically compiled to bytecode that can run on any Java virtual
 machine (JVM) regardless of the underlying computer architecture. The syntax of
 Java is similar to C and C++, but has fewer low-level facilities than either of
 them. The Java runtime provides dynamic capabilities (such as reflection and ru
ntime code modification) that are typically not available in traditional compile
d languages. As of 2019, Java was one of the most popular programming languages
in use according to GitHub,[18][19] particularly for client-server web applicati
ons, with a reported 9 million developers.', 'created_at': datetime.datetime(202
1, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021
, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>)}]>
>>> author5.books.add(book2)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
NameError: name 'author5' is not defined
>>> author5=Author.objects.get(id=5)
>>> author5.books.add(book2)
>>> author5.books.all().values()
<QuerySet [{'id': 2, 'title': 'Java', 'desc': 'Java is a class-based, object-ori
ented programming language that is designed to have as few implementation depend
encies as possible. It is a general-purpose programming language intended to let
 application developers write once, run anywhere (WORA),[16] meaning that compil
ed Java code can run on all platforms that support Java without the need for rec
ompilation.[17] Java applications are typically compiled to bytecode that can ru
n on any Java virtual machine (JVM) regardless of the underlying computer archit
ecture. The syntax of Java is similar to C and C++, but has fewer low-level faci
lities than either of them. The Java runtime provides dynamic capabilities (such
 as reflection and runtime code modification) that are typically not available i
n traditional compiled languages. As of 2019, Java was one of the most popular p
rogramming languages in use according to GitHub,[18][19] particularly for client
-server web applications, with a reported 9 million developers.', 'created_at':
datetime.datetime(2021, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>), 'updated_at': d
atetime.datetime(2021, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>)}]>
>>> author3.books.all().values()
<QuerySet [{'id': 1, 'title': 'C Sharp', 'desc': 'C# (pronounced see sharp, like
 the musical note C?, but written with the number sign)[b] is a general-purpose,
 multi-paradigm programming language encompassing static typing, strong typing,
lexically scoped, imperative, declarative, functional, generic, object-oriented
(class-based), and component-oriented programming disciplines.[15]', 'created_at
': datetime.datetime(2021, 4, 22, 21, 38, 27, 711868, tzinfo=<UTC>), 'updated_at
': datetime.datetime(2021, 4, 22, 21, 38, 27, 711868, tzinfo=<UTC>)}, {'id': 2,
'title': 'Java', 'desc': 'Java is a class-based, object-oriented programming lan
guage that is designed to have as few implementation dependencies as possible. I
t is a general-purpose programming language intended to let application develope
rs write once, run anywhere (WORA),[16] meaning that compiled Java code can run
on all platforms that support Java without the need for recompilation.[17] Java
applications are typically compiled to bytecode that can run on any Java virtual
 machine (JVM) regardless of the underlying computer architecture. The syntax of
 Java is similar to C and C++, but has fewer low-level facilities than either of
 them. The Java runtime provides dynamic capabilities (such as reflection and ru
ntime code modification) that are typically not available in traditional compile
d languages. As of 2019, Java was one of the most popular programming languages
in use according to GitHub,[18][19] particularly for client-server web applicati
ons, with a reported 9 million developers.', 'created_at': datetime.datetime(202
1, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>), 'updated_at': datetime.datetime(2021
, 4, 22, 21, 43, 4, 362691, tzinfo=<UTC>)}, {'id': 3, 'title': 'Python', 'desc':
 "Python is an interpreted high-level general-purpose programming language. Pyth
on's design philosophy emphasizes code readability with its notable use of signi
ficant indentation. Its language constructs as well as its object-oriented appro
ach aim to help programmers write clear, logical code for small and large-scale
projects.[30]", 'created_at': datetime.datetime(2021, 4, 22, 21, 45, 42, 796753,
 tzinfo=<UTC>), 'updated_at': datetime.datetime(2021, 4, 22, 21, 45, 42, 796753,
 tzinfo=<UTC>)}, {'id': 4, 'title': 'PHP', 'desc': 'PHP is a general-purpose scr
ipting language especially suited to web development.[5] It was originally creat
ed by Danish-Canadian programmer Rasmus Lerdorf in 1994.[6] The PHP reference im
plementation is now produced by The PHP Group.[7] PHP originally stood for Perso
nal Home Page,[6] but it now stands for the recursive initialism PHP: Hypertext
Preprocessor.PHP code is usually processed on a web server by a PHP interpreter
implemented as a module, a daemon or as a Common Gateway Interface (CGI) executa
ble. On a web server, the result of the interpreted and executed PHP code ? whic
h may be any type of data, such as generated HTML or binary image data ? would f
orm the whole or part of an HTTP response. Various web template systems, web con
tent management systems, and web frameworks exist which can be employed to orche
strate or facilitate the generation of that response. Additionally, PHP can be u
sed for many programming tasks outside of the web context, such as standalone gr
aphical applications and robotic drone control.Arbitrary PHP code can also be in
terpreted and executed via command-line interface (CLI).', 'created_at': datetim
e.datetime(2021, 4, 22, 21, 49, 20, 183187, tzinfo=<UTC>), 'updated_at': datetim
e.datetime(2021, 4, 22, 21, 49, 20, 183187, tzinfo=<UTC>)}]>
>>> author3.books.title
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'ManyRelatedManager' object has no attribute 'title'
>>> book5.authors.all().values()
<QuerySet [{'id': 4, 'first_name': 'William', 'last_name': 'Shakespeare', 'notes
': None, 'created_at': datetime.datetime(2021, 4, 22, 21, 58, 21, 908172, tzinfo
=<UTC>), 'updated_at': datetime.datetime(2021, 4, 22, 21, 58, 21, 908172, tzinfo
=<UTC>)}]>
>>> book.title.all.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'str' object has no attribute 'all'
>>> Book.objects.title.all.values()
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Manager' object has no attribute 'title'
>>> book.title="C#"
>>> book.save()
>>>